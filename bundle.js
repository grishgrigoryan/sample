(function(main,scripts){
    var evaluate;
    if(typeof window!='undefined'){
        evaluate = function evaluate(name,content){
            var aMain = document.querySelector('script[main]');
            aMain.removeAttribute('main');
            aMain = aMain.src.split('/');
            aMain.pop();
            aMain =  aMain.join('/');
            var aHead = document.querySelector('head');
            var aScript = document.createElement('script');
            aScript.type = 'text/javascript';
            aScript.id = name;
            aScript.setAttribute('main',true);

            aScript.text = content+'\n//# sourceURL='+aMain+'/'+name+'.js'
            aHead.appendChild(aScript);
            aScript.setAttribute('src',aMain+'/'+name+'.js');
        }
    }else{
        evaluate = function evaluate(name,content){
            var context = {
                Buffer      : Buffer,
                require     : require,
                process     : process,
                console     : console,
                global      : global,
                __filename  : __filename,
                __dirname   : __dirname
            };
            require('vm').runInNewContext(content,context,{
                filename : __dirname+'/'+name+'.js'
            });
        }
    }
    var runtimeName = 'runtime/package';
    var runtimeScript = scripts[runtimeName];
    delete scripts[runtimeName];
    evaluate(runtimeName,runtimeScript);
    System.bundle(scripts);
    System.import(main).catch(function(e){
        console.info(e.stack||e);
    });
})('sample/Main',{
  "sample/Main": "System.register(['./sub/One', './sub/Two'], function(exports_1) {\n    var One_1, Two_1;\n    var Main;\n    return {\n        setters:[\n            function (One_1_1) {\n                One_1 = One_1_1;\n            },\n            function (Two_1_1) {\n                Two_1 = Two_1_1;\n            }],\n        execute: function() {\n            Main = (function () {\n                function Main(config) {\n                    this.one = new One_1.One();\n                    this.two = new Two_1.Two();\n                    console.info(\"Main Jan\");\n                }\n                Main.from = function (target) {\n                    console.info('Main.from', target);\n                };\n                Main.prototype.printNodeModules = function () {\n                    console.info(Object.keys(Buffer).join(' '));\n                    console.info(Object.keys(process).join(' '));\n                };\n                Main.prototype.printModules = function () {\n                    console.info(Object.keys(System));\n                };\n                return Main;\n            })();\n            exports_1(\"Main\", Main);\n            new Main('Test').printModules();\n        }\n    }\n});//# sourceMappingURL=data:application/json;charset=utf-8;base64,ewogICJ2ZXJzaW9uIjogMywKICAiZmlsZSI6ICJNYWluLmpzIiwKICAic291cmNlUm9vdCI6ICIvVXNlcnMvU2VyZ2V5L1dvcmsvQkIvZWNtYWwvc2FtcGxlL3NyYyIsCiAgInNvdXJjZXMiOiBbCiAgICAiTWFpbi50cyIKICBdLAogICJuYW1lcyI6IFsKICAgICJNYWluIiwKICAgICJNYWluLmNvbnN0cnVjdG9yIiwKICAgICJNYWluLmZyb20iLAogICAgIk1haW4ucHJpbnROb2RlTW9kdWxlcyIsCiAgICAiTWFpbi5wcmludE1vZHVsZXMiCiAgXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7WUFnQ0E7Z0JBTUlBLGNBQVlBLE1BQU1BO29CQUZYQyxRQUFHQSxHQUFPQSxJQUFJQSxTQUFHQSxFQUFFQSxDQUFDQTtvQkFDcEJBLFFBQUdBLEdBQU9BLElBQUlBLFNBQUdBLEVBQUVBLENBQUNBO29CQUV2QkEsT0FBT0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsQ0FBQ0E7Z0JBQzdCQSxDQUFDQTtnQkFQTUQsU0FBSUEsR0FBWEEsVUFBWUEsTUFBVUE7b0JBQ2xCRSxPQUFPQSxDQUFDQSxJQUFJQSxDQUFDQSxXQUFXQSxFQUFDQSxNQUFNQSxDQUFDQSxDQUFDQTtnQkFDckNBLENBQUNBO2dCQU1ERiwrQkFBZ0JBLEdBQWhCQTtvQkFDSUcsT0FBT0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7b0JBQzVDQSxPQUFPQSxDQUFDQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxPQUFPQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFDakRBLENBQUNBO2dCQUNESCwyQkFBWUEsR0FBWkE7b0JBQ0lJLE9BQU9BLENBQUNBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBO2dCQUN0Q0EsQ0FBQ0E7Z0JBQ0xKLFdBQUNBO1lBQURBLENBQUNBLEFBaEJELElBZ0JDO1lBaEJELHVCQWdCQyxDQUFBO1lBRUQsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsWUFBWSxFQUFFLENBQUMiLAogICJzb3VyY2VzQ29udGVudCI6IFsKICAgICJpbXBvcnQge09uZX0gZnJvbSAnLi9zdWIvT25lJztcbmltcG9ydCB7VHdvfSBmcm9tICcuL3N1Yi9Ud28nO1xuXG5pbXBvcnQgKiBhcyBhc3NlcnQgZnJvbSAnbm9kZS9hc3NlcnQnO1xuaW1wb3J0ICogYXMgYnVmZmVyIGZyb20gJ25vZGUvYnVmZmVyJztcbmltcG9ydCAqIGFzIGNoaWxkX3Byb2Nlc3MgZnJvbSAnbm9kZS9jaGlsZF9wcm9jZXNzJztcbmltcG9ydCAqIGFzIGNsdXN0ZXIgZnJvbSAnbm9kZS9jbHVzdGVyJztcbmltcG9ydCAqIGFzIGNvbnN0YW50cyBmcm9tICdub2RlL2NvbnN0YW50cyc7XG5pbXBvcnQgKiBhcyBjcnlwdG8gZnJvbSAnbm9kZS9jcnlwdG8nO1xuaW1wb3J0ICogYXMgZGdyYW0gZnJvbSAnbm9kZS9kZ3JhbSc7XG5pbXBvcnQgKiBhcyBkbnMgZnJvbSAnbm9kZS9kbnMnO1xuaW1wb3J0ICogYXMgZG9tYWluIGZyb20gJ25vZGUvZG9tYWluJztcbmltcG9ydCAqIGFzIGV2ZW50cyBmcm9tICdub2RlL2V2ZW50cyc7XG5pbXBvcnQgKiBhcyBmcyBmcm9tICdub2RlL2ZzJztcbmltcG9ydCAqIGFzIGh0dHAgZnJvbSAnbm9kZS9odHRwJztcbmltcG9ydCAqIGFzIGh0dHBzIGZyb20gJ25vZGUvaHR0cHMnO1xuaW1wb3J0ICogYXMgbmV0IGZyb20gJ25vZGUvbmV0JztcbmltcG9ydCAqIGFzIG9zIGZyb20gJ25vZGUvb3MnO1xuaW1wb3J0ICogYXMgcGF0aCBmcm9tICdub2RlL3BhdGgnO1xuaW1wb3J0ICogYXMgcHVueWNvZGUgZnJvbSAnbm9kZS9wdW55Y29kZSc7XG5pbXBvcnQgKiBhcyBxdWVyeXN0cmluZyBmcm9tICdub2RlL3F1ZXJ5c3RyaW5nJztcbmltcG9ydCAqIGFzIHJlYWRsaW5lIGZyb20gJ25vZGUvcmVhZGxpbmUnO1xuaW1wb3J0ICogYXMgcmVwbCBmcm9tICdub2RlL3JlcGwnO1xuaW1wb3J0ICogYXMgc3RyZWFtIGZyb20gJ25vZGUvc3RyZWFtJztcbmltcG9ydCAqIGFzIHN0cmluZ19kZWNvZGVyIGZyb20gJ25vZGUvc3RyaW5nX2RlY29kZXInO1xuaW1wb3J0ICogYXMgdGxzIGZyb20gJ25vZGUvdGxzJztcbmltcG9ydCAqIGFzIHR0eSBmcm9tICdub2RlL3R0eSc7XG5pbXBvcnQgKiBhcyB1cmwgZnJvbSAnbm9kZS91cmwnO1xuaW1wb3J0ICogYXMgdXRpbCBmcm9tICdub2RlL3V0aWwnO1xuaW1wb3J0ICogYXMgdm0gZnJvbSAnbm9kZS92bSc7XG5pbXBvcnQgKiBhcyB6bGliIGZyb20gJ25vZGUvemxpYic7XG5cbmV4cG9ydCBjbGFzcyBNYWluIHtcbiAgICBzdGF0aWMgZnJvbSh0YXJnZXQ6YW55KXtcbiAgICAgICAgY29uc29sZS5pbmZvKCdNYWluLmZyb20nLHRhcmdldCk7XG4gICAgfVxuICAgIHB1YmxpYyBvbmU6T25lID0gbmV3IE9uZSgpO1xuICAgIHB1YmxpYyB0d286VHdvID0gbmV3IFR3bygpO1xuICAgIGNvbnN0cnVjdG9yKGNvbmZpZyl7XG4gICAgICAgIGNvbnNvbGUuaW5mbyhcIk1haW4gSmFuXCIpO1xuICAgIH1cbiAgICBwcmludE5vZGVNb2R1bGVzKCl7XG4gICAgICAgIGNvbnNvbGUuaW5mbyhPYmplY3Qua2V5cyhCdWZmZXIpLmpvaW4oJyAnKSk7XG4gICAgICAgIGNvbnNvbGUuaW5mbyhPYmplY3Qua2V5cyhwcm9jZXNzKS5qb2luKCcgJykpO1xuICAgIH1cbiAgICBwcmludE1vZHVsZXMoKXtcbiAgICAgICAgY29uc29sZS5pbmZvKE9iamVjdC5rZXlzKFN5c3RlbSkpO1xuICAgIH1cbn1cblxubmV3IE1haW4oJ1Rlc3QnKS5wcmludE1vZHVsZXMoKTsiCiAgXQp9",
  "sample/sub/One": "System.register(['../Main'], function(exports_1) {\n    var Main_1;\n    var One;\n    return {\n        setters:[\n            function (Main_1_1) {\n                Main_1 = Main_1_1;\n            }],\n        execute: function() {\n            One = (function () {\n                function One() {\n                    Main_1.Main.from('One');\n                }\n                return One;\n            })();\n            exports_1(\"One\", One);\n        }\n    }\n});//# sourceMappingURL=data:application/json;charset=utf-8;base64,ewogICJ2ZXJzaW9uIjogMywKICAiZmlsZSI6ICJPbmUuanMiLAogICJzb3VyY2VSb290IjogIi9Vc2Vycy9TZXJnZXkvV29yay9CQi9lY21hbC9zYW1wbGUvc3JjIiwKICAic291cmNlcyI6IFsKICAgICJPbmUudHMiCiAgXSwKICAibmFtZXMiOiBbCiAgICAiT25lIiwKICAgICJPbmUuY29uc3RydWN0b3IiCiAgXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7WUFDQTtnQkFDSUE7b0JBQ0lDLFdBQUlBLENBQUNBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLENBQUNBO2dCQUNyQkEsQ0FBQ0E7Z0JBQ0xELFVBQUNBO1lBQURBLENBQUNBLEFBSkQsSUFJQztZQUpELHFCQUlDLENBQUEiLAogICJzb3VyY2VzQ29udGVudCI6IFsKICAgICJpbXBvcnQge01haW59IGZyb20gJy4uL01haW4nO1xuZXhwb3J0IGNsYXNzIE9uZSB7XG4gICAgY29uc3RydWN0b3IoKXtcbiAgICAgICAgTWFpbi5mcm9tKCdPbmUnKTtcbiAgICB9XG59XG4iCiAgXQp9",
  "sample/sub/Tree": "console.info('gago');//# sourceMappingURL=data:application/json;charset=utf-8;base64,ewogICJ2ZXJzaW9uIjogMywKICAiZmlsZSI6ICJUcmVlLmpzIiwKICAic291cmNlUm9vdCI6ICIvVXNlcnMvU2VyZ2V5L1dvcmsvQkIvZWNtYWwvc2FtcGxlL3NyYyIsCiAgInNvdXJjZXMiOiBbCiAgICAiVHJlZS50cyIKICBdLAogICJuYW1lcyI6IFtdLAogICJtYXBwaW5ncyI6ICJBQUFBLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMiLAogICJzb3VyY2VzQ29udGVudCI6IFsKICAgICJjb25zb2xlLmluZm8oJ2dhZ28nKTsiCiAgXQp9",
  "sample/sub/Two": "System.register(['../Main'], function(exports_1) {\n    var Main_1;\n    var Two;\n    return {\n        setters:[\n            function (Main_1_1) {\n                Main_1 = Main_1_1;\n            }],\n        execute: function() {\n            Two = (function () {\n                function Two() {\n                    Main_1.Main.from('Two');\n                }\n                return Two;\n            })();\n            exports_1(\"Two\", Two);\n        }\n    }\n});//# sourceMappingURL=data:application/json;charset=utf-8;base64,ewogICJ2ZXJzaW9uIjogMywKICAiZmlsZSI6ICJUd28uanMiLAogICJzb3VyY2VSb290IjogIi9Vc2Vycy9TZXJnZXkvV29yay9CQi9lY21hbC9zYW1wbGUvc3JjIiwKICAic291cmNlcyI6IFsKICAgICJUd28udHMiCiAgXSwKICAibmFtZXMiOiBbCiAgICAiVHdvIiwKICAgICJUd28uY29uc3RydWN0b3IiCiAgXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7WUFFQTtnQkFDSUE7b0JBQ0lDLFdBQUlBLENBQUNBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLENBQUNBO2dCQUNyQkEsQ0FBQ0E7Z0JBQ0xELFVBQUNBO1lBQURBLENBQUNBLEFBSkQsSUFJQztZQUpELHFCQUlDLENBQUEiLAogICJzb3VyY2VzQ29udGVudCI6IFsKICAgICJpbXBvcnQge01haW59IGZyb20gJy4uL01haW4nO1xuXG5leHBvcnQgY2xhc3MgVHdvIHtcbiAgICBjb25zdHJ1Y3Rvcigpe1xuICAgICAgICBNYWluLmZyb20oJ1R3bycpO1xuICAgIH1cbn0iCiAgXQp9",
  "cli/command": "System.register([], function(exports_1) {\n    var Command;\n    return {\n        setters:[],\n        execute: function() {\n            Command = (function () {\n                function Command() {\n                }\n                return Command;\n            })();\n            exports_1(\"Command\", Command);\n        }\n    }\n});//# sourceMappingURL=data:application/json;charset=utf-8;base64,ewogICJ2ZXJzaW9uIjogMywKICAiZmlsZSI6ICJjb21tYW5kLmpzIiwKICAic291cmNlUm9vdCI6ICIvVXNlcnMvU2VyZ2V5L1dvcmsvQkIvZWNtYWwvY2xpL3NyYyIsCiAgInNvdXJjZXMiOiBbCiAgICAiY29tbWFuZC50cyIKICBdLAogICJuYW1lcyI6IFsKICAgICJDb21tYW5kIiwKICAgICJDb21tYW5kLmNvbnN0cnVjdG9yIgogIF0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7WUFBQTtnQkFBQUE7Z0JBQXNCQyxDQUFDQTtnQkFBREQsY0FBQ0E7WUFBREEsQ0FBQ0EsQUFBdkIsSUFBdUI7WUFBdkIsNkJBQXVCLENBQUEiLAogICJzb3VyY2VzQ29udGVudCI6IFsKICAgICJleHBvcnQgY2xhc3MgQ29tbWFuZCB7fSIKICBdCn0=",
  "cli/commander": "System.register([], function(exports_1) {\n    var Commander;\n    return {\n        setters:[],\n        execute: function() {\n            Commander = (function () {\n                function Commander() {\n                }\n                return Commander;\n            })();\n            exports_1(\"Commander\", Commander);\n        }\n    }\n});//# sourceMappingURL=data:application/json;charset=utf-8;base64,ewogICJ2ZXJzaW9uIjogMywKICAiZmlsZSI6ICJjb21tYW5kZXIuanMiLAogICJzb3VyY2VSb290IjogIi9Vc2Vycy9TZXJnZXkvV29yay9CQi9lY21hbC9jbGkvc3JjIiwKICAic291cmNlcyI6IFsKICAgICJjb21tYW5kZXIudHMiCiAgXSwKICAibmFtZXMiOiBbCiAgICAiQ29tbWFuZGVyIiwKICAgICJDb21tYW5kZXIuY29uc3RydWN0b3IiCiAgXSwKICAibWFwcGluZ3MiOiAiOzs7OztZQUFBO2dCQUFBQTtnQkFBdUJDLENBQUNBO2dCQUFERCxnQkFBQ0E7WUFBREEsQ0FBQ0EsQUFBeEIsSUFBd0I7WUFBeEIsaUNBQXdCLENBQUEiLAogICJzb3VyY2VzQ29udGVudCI6IFsKICAgICJleHBvcnQgY2xhc3MgQ29tbWFuZGVye30iCiAgXQp9",
  "runtime/package": "var __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Ecmal;\n(function (Ecmal) {\n    var Loader = (function () {\n        function Loader() {\n            this.options = {};\n            this.modules = {};\n            this.cache = {};\n        }\n        Object.defineProperty(Loader.prototype, \"base\", {\n            get: function () {\n                if (!this.options.base) {\n                    this.options.base = Ecmal.Path.resolve(Ecmal.Path.dirname(this.runtime), '../');\n                }\n                return this.options.base;\n            },\n            set: function (v) {\n                this.options.base = v;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Loader.prototype.bundle = function (contents) {\n            for (var i in contents) {\n                this.cache[i.toLowerCase()] = contents[i];\n            }\n        };\n        Loader.prototype.get = function (url) {\n            var id = url.replace(this.base + '/', '').replace(/^(.*)\\.js$/g, '$1').toLowerCase();\n            var module = this.modules[id];\n            if (!module) {\n                module = this.modules[id] = { id: id, url: url };\n            }\n            return module;\n        };\n        Loader.prototype.register = function (name, dependencies, executable) {\n            this.current.dependencies = dependencies;\n            this.current.executable = executable;\n        };\n        Loader.prototype.import = function (name) {\n            var _this = this;\n            var url = Ecmal.Path.resolve(this.base, name + '.js');\n            var dir = Ecmal.Path.dirname(url);\n            var mod = this.get(url);\n            if (mod.exports) {\n                return Promise.resolve(mod.exports);\n            }\n            else {\n                return this.fetch(mod).then(function (m) { return _this.define(m); }).then(function (m) { return m.exports; });\n            }\n        };\n        Loader.prototype.fetch = function (module) {\n            var _this = this;\n            var promise = Promise.resolve(module);\n            if (typeof module.source == 'undefined' && !module.defined) {\n                module.source = '';\n                promise = this.read(module)\n                    .then(function () { return _this.eval(module); })\n                    .then(function () {\n                    var dir = Ecmal.Path.dirname(module.url);\n                    var dependencies = module.dependencies.map(function (d) {\n                        var path = d + '.js';\n                        if (path[0] == '.') {\n                            path = Ecmal.Path.resolve(dir, path);\n                        }\n                        else {\n                            path = Ecmal.Path.resolve(_this.base, path);\n                        }\n                        return _this.fetch(_this.get(path));\n                    });\n                    return Promise.all(dependencies).then(function (modules) {\n                        for (var d = 0; d < modules.length; d++) {\n                            module.dependencies[d] = modules[d];\n                            modules[d].parent = module;\n                        }\n                        return module;\n                    });\n                });\n            }\n            return promise;\n        };\n        Loader.prototype.define = function (module) {\n            var _this = this;\n            if (module.defined) {\n                return Promise.resolve(module);\n            }\n            else {\n                module.defined = true;\n                module.exports = {};\n                var definer = new module.executable(function (name, val) {\n                    module.exports[name] = val;\n                });\n                if (module.dependencies.length) {\n                    var promises = module.dependencies.map(function (m) { return _this.define(m).then(function (m) { return m.exports; }); });\n                    return Promise.all(promises).then(function (exps) {\n                        for (var i = 0; i < exps.length; i++) {\n                            definer.setters[i](exps[i]);\n                        }\n                        definer.execute();\n                        return module;\n                    });\n                }\n                else {\n                    definer.execute();\n                    return Promise.resolve(module);\n                }\n            }\n        };\n        return Loader;\n    })();\n    Ecmal.Loader = Loader;\n    var ServerSideLoader = (function (_super) {\n        __extends(ServerSideLoader, _super);\n        function ServerSideLoader() {\n            _super.call(this);\n        }\n        Object.defineProperty(ServerSideLoader, \"FS\", {\n            get: function () {\n                return Object.defineProperty(this, 'FS', {\n                    value: require('fs')\n                }).FS;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ServerSideLoader, \"VM\", {\n            get: function () {\n                return Object.defineProperty(this, 'VM', {\n                    value: require('vm')\n                }).VM;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ServerSideLoader.prototype, \"runtime\", {\n            get: function () {\n                return __filename;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ServerSideLoader.prototype, \"main\", {\n            get: function () {\n                return process.argv[2];\n            },\n            enumerable: true,\n            configurable: true\n        });\n        ServerSideLoader.prototype.get = function (name) {\n            var mod = _super.prototype.get.call(this, name);\n            if (mod.id.indexOf('node/') == 0) {\n                mod.defined = true;\n                mod.exports = require(mod.id.substring(5));\n                return mod;\n            }\n            else {\n                return mod;\n            }\n        };\n        ServerSideLoader.prototype.read = function (module) {\n            if (this.cache[module.id]) {\n                module.source = this.cache[module.id];\n                return Promise.resolve(module);\n            }\n            else {\n                return new Promise(function (accept, reject) {\n                    ServerSideLoader.FS.readFile(module.url, 'utf8', function (err, data) {\n                        if (err) {\n                            reject(err);\n                        }\n                        else {\n                            module.source = data;\n                            accept(module);\n                        }\n                    });\n                });\n            }\n        };\n        ServerSideLoader.prototype.eval = function (module) {\n            this.current = module;\n            var context = {\n                System: global['System'],\n                Buffer: global['Buffer'],\n                require: global['require'],\n                process: global['process'],\n                console: global['console'],\n                __filename: module.url,\n                __dirname: Ecmal.Path.dirname(module.url)\n            };\n            ServerSideLoader.VM.runInNewContext(module.source, context, {\n                filename: module.url\n            });\n            this.current = null;\n            return Promise.resolve(module);\n        };\n        return ServerSideLoader;\n    })(Loader);\n    Ecmal.ServerSideLoader = ServerSideLoader;\n    var ClientSideLoader = (function (_super) {\n        __extends(ClientSideLoader, _super);\n        function ClientSideLoader() {\n            _super.apply(this, arguments);\n        }\n        Object.defineProperty(ClientSideLoader.prototype, \"script\", {\n            get: function () {\n                return document.querySelector('script[main]');\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ClientSideLoader.prototype, \"runtime\", {\n            get: function () {\n                return this.script.src;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ClientSideLoader.prototype, \"main\", {\n            get: function () {\n                return this.script.getAttribute('main');\n            },\n            enumerable: true,\n            configurable: true\n        });\n        ClientSideLoader.prototype.read = function (module) {\n            if (this.cache[module.id]) {\n                module.source = this.cache[module.id];\n                return Promise.resolve(module);\n            }\n            else {\n                return new Promise(function (accept, reject) {\n                    var oReq = new XMLHttpRequest();\n                    oReq.addEventListener('load', function (e) {\n                        module.source = oReq.responseText;\n                        accept(module);\n                    });\n                    oReq.addEventListener(\"error\", function (e) {\n                        reject(e);\n                    });\n                    oReq.open(\"get\", module.url, true);\n                    oReq.send();\n                });\n            }\n        };\n        ClientSideLoader.prototype.eval = function (module) {\n            this.current = module;\n            var aHead = document.querySelector('head');\n            var aScript = document.createElement('script');\n            aScript.type = 'text/javascript';\n            aScript.id = module.id;\n            aScript.text = module.source + '\\n//# sourceURL=' + module.url;\n            aHead.appendChild(aScript);\n            this.current = null;\n            return Promise.resolve(module);\n        };\n        return ClientSideLoader;\n    })(Loader);\n    Ecmal.ClientSideLoader = ClientSideLoader;\n})(Ecmal || (Ecmal = {}));\nvar Ecmal;\n(function (Ecmal) {\n    (function (Environment) {\n        Environment[Environment[\"SERVER\"] = 0] = \"SERVER\";\n        Environment[Environment[\"CLIENT\"] = 1] = \"CLIENT\";\n    })(Ecmal.Environment || (Ecmal.Environment = {}));\n    var Environment = Ecmal.Environment;\n    function platform() {\n        var support = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            support[_i - 0] = arguments[_i];\n        }\n        return function (target) {\n            target.support = support;\n        };\n    }\n    Ecmal.platform = platform;\n})(Ecmal || (Ecmal = {}));\nvar Ecmal;\n(function (Ecmal) {\n    var Path = (function () {\n        function Path() {\n        }\n        Path.filename = function (path) {\n            return path.split(Path.SEP).pop();\n        };\n        Path.dirname = function (path) {\n            path = path.split('/');\n            path.pop();\n            path = path.join('/');\n            return path;\n        };\n        Path.normalize = function (path) {\n            if (!path || path === '/') {\n                return '/';\n            }\n            var prepend = (path[0] == '/' || path[0] == '.');\n            var target = [], src, scheme, parts, token;\n            if (path.indexOf('://') > 0) {\n                parts = path.split('://');\n                scheme = parts[0];\n                src = parts[1].split('/');\n            }\n            else {\n                src = path.split('/');\n            }\n            for (var i = 0; i < src.length; ++i) {\n                token = src[i];\n                if (token === '..') {\n                    target.pop();\n                }\n                else if (token !== '' && token !== '.') {\n                    target.push(token);\n                }\n            }\n            return ((scheme ? scheme + '://' : '') +\n                (prepend ? '/' : '') +\n                target.join('/').replace(/[\\/]{2,}/g, '/'));\n        };\n        Path.resolve = function () {\n            var paths = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                paths[_i - 0] = arguments[_i];\n            }\n            var current = paths.shift();\n            for (var path = void 0, p = 0; p < paths.length; p++) {\n                path = paths[p];\n                if (path[0] == '/') {\n                    current = path;\n                }\n                else {\n                    current = Path.normalize(current + '/' + path);\n                }\n            }\n            return current;\n        };\n        Path.SEP = '/';\n        return Path;\n    })();\n    Ecmal.Path = Path;\n})(Ecmal || (Ecmal = {}));\nvar Ecmal;\n(function (Ecmal) {\n    var Runtime = (function () {\n        function Runtime() {\n        }\n        Object.defineProperty(Runtime, \"environment\", {\n            get: function () {\n                if (typeof window != 'undefined') {\n                    return Ecmal.Environment.CLIENT;\n                }\n                else if (typeof process == 'object') {\n                    return Ecmal.Environment.SERVER;\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        return Runtime;\n    })();\n    Ecmal.Runtime = Runtime;\n    var System = (function () {\n        function System() {\n            switch (Runtime.environment) {\n                case Ecmal.Environment.SERVER:\n                    this.loader = new Ecmal.ServerSideLoader();\n                    break;\n                case Ecmal.Environment.CLIENT:\n                    this.loader = new Ecmal.ClientSideLoader();\n                    break;\n            }\n        }\n        System.prototype.config = function (options) {\n            if (options.base) {\n                this.loader.base = options.base;\n            }\n        };\n        System.prototype.register = function (name, deps, exec) {\n            if (Array.isArray(name)) {\n                this.loader.register('@', name, deps);\n            }\n            else {\n                this.loader.register(name, deps, exec);\n            }\n        };\n        System.prototype.import = function (name) {\n            return this.loader.import(name);\n        };\n        System.prototype.bundle = function (content) {\n            this.loader.bundle(content);\n        };\n        return System;\n    })();\n    Ecmal.System = System;\n    function run() {\n        var system = new Ecmal.System();\n        /*if(system.loader.main){\n            system.import(system.loader.main).then(Main=>{\n                return \"OK\";\n            }).catch(e=>console.log(e.stack));\n        }*/\n        if (typeof global != 'undefined') {\n            Object.defineProperty(global, 'System', {\n                value: system\n            });\n            Object.defineProperty(global, 'require', {\n                value: require\n            });\n        }\n        return system;\n    }\n    Ecmal.run = run;\n})(Ecmal || (Ecmal = {}));\nvar System = Ecmal.run();//# sourceMappingURL=data:application/json;charset=utf-8;base64,ewogICJ2ZXJzaW9uIjogMywKICAiZmlsZSI6ICJwYWNrYWdlLmpzIiwKICAic291cmNlcyI6IFsKICAgICIuL0xvYWRlci50cyIsCiAgICAiLi9Nb2R1bGUudHMiLAogICAgIi4vUGF0aC50cyIsCiAgICAiLi9TeXN0ZW0udHMiCiAgXSwKICAibmFtZXMiOiBbCiAgICAiRWNtYWwiLAogICAgIkVjbWFsLkxvYWRlciIsCiAgICAiRWNtYWwuTG9hZGVyLmNvbnN0cnVjdG9yIiwKICAgICJFY21hbC5Mb2FkZXIuYmFzZSIsCiAgICAiRWNtYWwuTG9hZGVyLmJ1bmRsZSIsCiAgICAiRWNtYWwuTG9hZGVyLmdldCIsCiAgICAiRWNtYWwuTG9hZGVyLnJlZ2lzdGVyIiwKICAgICJFY21hbC5Mb2FkZXIuaW1wb3J0IiwKICAgICJFY21hbC5Mb2FkZXIuZmV0Y2giLAogICAgIkVjbWFsLkxvYWRlci5kZWZpbmUiLAogICAgIkVjbWFsLlNlcnZlclNpZGVMb2FkZXIiLAogICAgIkVjbWFsLlNlcnZlclNpZGVMb2FkZXIuY29uc3RydWN0b3IiLAogICAgIkVjbWFsLlNlcnZlclNpZGVMb2FkZXIuRlMiLAogICAgIkVjbWFsLlNlcnZlclNpZGVMb2FkZXIuVk0iLAogICAgIkVjbWFsLlNlcnZlclNpZGVMb2FkZXIucnVudGltZSIsCiAgICAiRWNtYWwuU2VydmVyU2lkZUxvYWRlci5tYWluIiwKICAgICJFY21hbC5TZXJ2ZXJTaWRlTG9hZGVyLmdldCIsCiAgICAiRWNtYWwuU2VydmVyU2lkZUxvYWRlci5yZWFkIiwKICAgICJFY21hbC5TZXJ2ZXJTaWRlTG9hZGVyLmV2YWwiLAogICAgIkVjbWFsLkNsaWVudFNpZGVMb2FkZXIiLAogICAgIkVjbWFsLkNsaWVudFNpZGVMb2FkZXIuY29uc3RydWN0b3IiLAogICAgIkVjbWFsLkNsaWVudFNpZGVMb2FkZXIuc2NyaXB0IiwKICAgICJFY21hbC5DbGllbnRTaWRlTG9hZGVyLnJ1bnRpbWUiLAogICAgIkVjbWFsLkNsaWVudFNpZGVMb2FkZXIubWFpbiIsCiAgICAiRWNtYWwuQ2xpZW50U2lkZUxvYWRlci5yZWFkIiwKICAgICJFY21hbC5DbGllbnRTaWRlTG9hZGVyLmV2YWwiLAogICAgIkVjbWFsLkVudmlyb25tZW50IiwKICAgICJFY21hbC5wbGF0Zm9ybSIsCiAgICAiRWNtYWwuUGF0aCIsCiAgICAiRWNtYWwuUGF0aC5jb25zdHJ1Y3RvciIsCiAgICAiRWNtYWwuUGF0aC5maWxlbmFtZSIsCiAgICAiRWNtYWwuUGF0aC5kaXJuYW1lIiwKICAgICJFY21hbC5QYXRoLm5vcm1hbGl6ZSIsCiAgICAiRWNtYWwuUGF0aC5yZXNvbHZlIiwKICAgICJFY21hbC5SdW50aW1lIiwKICAgICJFY21hbC5SdW50aW1lLmNvbnN0cnVjdG9yIiwKICAgICJFY21hbC5SdW50aW1lLmVudmlyb25tZW50IiwKICAgICJFY21hbC5TeXN0ZW0iLAogICAgIkVjbWFsLlN5c3RlbS5jb25zdHJ1Y3RvciIsCiAgICAiRWNtYWwuU3lzdGVtLmNvbmZpZyIsCiAgICAiRWNtYWwuU3lzdGVtLnJlZ2lzdGVyIiwKICAgICJFY21hbC5TeXN0ZW0uaW1wb3J0IiwKICAgICJFY21hbC5TeXN0ZW0uYnVuZGxlIiwKICAgICJFY21hbC5ydW4iCiAgXSwKICAibWFwcGluZ3MiOiAiOzs7OztBQUVBLElBQVUsS0FBSyxDQTBOZDtBQTFORCxXQUFVLEtBQUssRUFBQyxDQUFDO0lBUWJBO1FBUUlDO1lBQ0lDLElBQUlBLENBQUNBLE9BQU9BLEdBQUdBLEVBQUVBLENBQUNBO1lBQ2xCQSxJQUFJQSxDQUFDQSxPQUFPQSxHQUFHQSxFQUFFQSxDQUFDQTtZQUNsQkEsSUFBSUEsQ0FBQ0EsS0FBS0EsR0FBR0EsRUFBRUEsQ0FBQ0E7UUFDcEJBLENBQUNBO1FBQ0RELHNCQUFJQSx3QkFBSUE7aUJBQVJBO2dCQUNJRSxFQUFFQSxDQUFBQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxPQUFPQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFBQSxDQUFDQTtvQkFDbkJBLElBQUlBLENBQUNBLE9BQU9BLENBQUNBLElBQUlB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WUFBQUEsSUFBSUEsQ0FBQUEsQ0FBQ0E7Z0JBQ0ZBLE1BQU1BLENBQUNBLE9BQU9BLEdBQUdBLElBQUlBLENBQUNBO2dCQUN0QkEsTUFBTUEsQ0FBQ0EsT0FBT0EsR0FBR0EsRUFBRUEsQ0FBQ0E7Z0JBQ3BCQSxJQUFJQSxPQUFPQSxHQUFPQSxJQUFJQSxNQUFNQSxDQUFDQSxVQUFVQSxDQUFDQSxVQUFDQSxJQUFJQSxFQUFDQSxHQUFHQTtvQkFDN0NBLE1BQU1BLENBQUNBLE9BQU9BLENBQUNBLElBQUlBLENBQUNBLEdBQUdBLEdBQUdBLENBQUNBO2dCQUMvQkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBQ0hBLEVBQUVBLENBQUFBLENBQUNBLE1BQU1BLENBQUNBLFlBQVlBLENBQUNBLE1BQU1BLENBQUNBLENBQUFBLENBQUNBO29CQUMzQkEsSUFBSUEsUUFBUUEsR0FBa0JBLE1BQU1BLENBQUNBLFlBQVlBLENBQUNBLEdBQUdBLENBQUNBLFVBQUNBLENBQUNBLElBQU9BLE9BQUFBLEtBQUlBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLFVBQUFBLENBQUNBLElBQUVBLE9BQUFBLENBQUNBLENBQUNBLE9BQU9BLEVBQVRBLENBQVNBLENBQUNBLEVBQWpDQSxDQUFpQ0EsQ0FBQ0EsQ0FBQ0E7b0JBQ2xHQSxNQUFNQSxDQUFDQSxPQUFPQSxDQUFDQSxHQUFHQSxDQUFDQSxRQUFRQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxVQUFDQSxJQUFRQTt3QkFDdkNBLEdBQUdBLENBQUFBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLEdBQUNBLENBQUNBLEVBQUNBLENBQUNBLEdBQUNBLElBQUlBLENBQUNBLE1BQU1BLEVBQUNBLENBQUNBLEVBQUVBLEVBQUNBLENBQUNBOzRCQUMzQkEsT0FBT0EsQ0FBQ0EsT0FBT0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQUE7d0JBQy9CQSxDQUFDQTt3QkFDREEsT0FBT0Es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LEVBQUVBLE9BQU9BO2FBQ2pCQSxDQUFDQSxDQUFBQTtRQUNOQSxDQUFDQTtRQUNEQSxNQUFNQSxDQUFDQSxNQUFNQSxDQUFDQTtJQUNsQkEsQ0FBQ0E7SUFoQmUzQyxTQUFHQSxNQWdCbEJBLENBQUFBO0FBQ0xBLENBQUNBLEVBL0RTLEtBQUssS0FBTCxLQUFLLFFBK0RkO0FBRUQsSUFBTSxNQUFNLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxDQUFDIiwKICAic291cmNlc0NvbnRlbnQiOiBbCiAgICAiXG5cbm5hbWVzcGFjZSBFY21hbCB7XG4gICAgZGVjbGFyZSB2YXIgX19maWxlbmFtZTpzdHJpbmc7XG4gICAgZGVjbGFyZSB2YXIgZG9jdW1lbnQ6YW55O1xuICAgIGRlY2xhcmUgdmFyIGdsb2JhbDphbnk7XG4gICAgZGVjbGFyZSB2YXIgcHJvY2Vzczphbnk7XG4gICAgZGVjbGFyZSB2YXIgWE1MSHR0cFJlcXVlc3Q6YW55O1xuICAgIGRlY2xhcmUgdmFyIEV2ZW50OmFueTtcbiAgICBkZWNsYXJlIGZ1bmN0aW9uIHJlcXVpcmUocGF0aDpzdHJpbmcpOmFueTtcbiAgICBleHBvcnQgYWJzdHJhY3QgY2xhc3MgTG9hZGVyIHtcbiAgICAgICAgcHVibGljIG1haW46c3RyaW5nO1xuICAgICAgICBwdWJsaWMgcnVudGltZTpzdHJpbmc7XG4gICAgICAgIHB1YmxpYyBjdXJyZW50Ok1vZHVsZTtcbiAgICAgICAgcHVibGljIG1vZHVsZXM6TW9kdWxlcztcbiAgICAgICAgcHVibGljIG9wdGlvbnM6YW55O1xuICAgICAgICBwdWJsaWMgY2FjaGU6YW55O1xuXG4gICAgICAgIGNvbnN0cnVjdG9yKCl7XG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMgPSB7fTtcbiAgICAgICAgICAgIHRoaXMubW9kdWxlcyA9IHt9O1xuICAgICAgICAgICAgdGhpcy5jYWNoZSA9IHt9O1xuICAgICAgICB9XG4gICAgICAgIGdldCBiYXNlKCk6c3RyaW5ne1xuICAgICAgICAgICAgaWYoIXRoaXMub3B0aW9ucy5iYXNlKXtcbiAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMuYmFzZSA9IFBhdGgucmVzb2x2ZShQYXRoLmRpcm5hbWUodGhpcy5ydW50aW1lKSwnLi4vJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLmJhc2U7XG4gICAgICAgIH1cbiAgICAgICAgc2V0IGJhc2UodjpzdHJpbmcpe1xuICAgICAgICAgICAgdGhpcy5vcHRpb25zLmJhc2U9djtcbiAgICAgICAgfVxuICAgICAgICBhYnN0cmFjdCBldmFsKHVybCk6UHJvbWlzZTxzdHJpbmc+O1xuICAgICAgICBhYnN0cmFjdCByZWFkKHVybCk6UHJvbWlzZTxzdHJpbmc+O1xuICAgICAgICBidW5kbGUoY29udGVudHM6YW55KXtcbiAgICAgICAgICAgIGZvcih2YXIgaSBpbiBjb250ZW50cyl7XG4gICAgICAgICAgICAgICAgdGhpcy5jYWNoZVtpLnRvTG93ZXJDYXNlKCldID0gY29udGVudHNbaV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZ2V0KHVybCl7XG4gICAgICAgICAgICB2YXIgaWQgPSB1cmwucmVwbGFjZSh0aGlzLmJhc2UrJy8nLCcnKS5yZXBsYWNlKC9eKC4qKVxcLmpzJC9nLCckMScpLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICB2YXIgbW9kdWxlOk1vZHVsZSA9dGhpcy5tb2R1bGVzW2lkXTtcbiAgICAgICAgICAgIGlmKCFtb2R1bGUpe1xuICAgICAgICAgICAgICAgIG1vZHVsZSA9IHRoaXMubW9kdWxlc1tpZF0gPSB7aWQsdXJsfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtb2R1bGU7XG4gICAgICAgIH1cbiAgICAgICAgcmVnaXN0ZXIobmFtZTpzdHJpbmcsZGVwZW5kZW5jaWVzOnN0cmluZ1tdLGV4ZWN1dGFibGU6YW55KXtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudC5kZXBlbmRlbmNpZXMgPSBkZXBlbmRlbmNpZXM7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnQuZXhlY3V0YWJsZSA9IGV4ZWN1dGFibGU7XG4gICAgICAgIH1cbiAgICAgICAgaW1wb3J0KG5hbWUpe1xuICAgICAgICAgICAgdmFyIHVybCA9IFBhdGgucmVzb2x2ZSh0aGlzLmJhc2UsbmFtZSsnLmpzJyk7XG4gICAgICAgICAgICB2YXIgZGlyID0gUGF0aC5kaXJuYW1lKHVybCk7XG4gICAgICAgICAgICB2YXIgbW9kID0gdGhpcy5nZXQodXJsKTtcbiAgICAgICAgICAgIGlmKG1vZC5leHBvcnRzKXtcbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG1vZC5leHBvcnRzKVxuICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZmV0Y2gobW9kKS50aGVuKChtOk1vZHVsZSk9PnRoaXMuZGVmaW5lKG0pKS50aGVuKChtOk1vZHVsZSk9Pm0uZXhwb3J0cyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZmV0Y2gobW9kdWxlOk1vZHVsZSk6UHJvbWlzZTxNb2R1bGU+IHtcbiAgICAgICAgICAgIHZhciBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKG1vZHVsZSk7XG4gICAgICAgICAgICBpZih0eXBlb2YgbW9kdWxlLnNvdXJjZT09J3VuZGVmaW5lZCcgJiYgIW1vZHVsZS5kZWZpbmVkKXtcbiAgICAgICAgICAgICAgICBtb2R1bGUuc291cmNlID0gJyc7XG4gICAgICAgICAgICAgICAgcHJvbWlzZSA9IHRoaXMucmVhZChtb2R1bGUpXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKCgpPT50aGlzLmV2YWwobW9kdWxlKSlcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oKCk9PntcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkaXIgPSBQYXRoLmRpcm5hbWUobW9kdWxlLnVybCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGVwZW5kZW5jaWVzOlByb21pc2U8TW9kdWxlPltdID0gbW9kdWxlLmRlcGVuZGVuY2llcy5tYXAoKGQpOlByb21pc2U8TW9kdWxlPj0+e1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwYXRoID0gZCsnLmpzJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihwYXRoWzBdPT0nLicpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXRoID0gUGF0aC5yZXNvbHZlKGRpcixwYXRoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXRoID0gUGF0aC5yZXNvbHZlKHRoaXMuYmFzZSxwYXRoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZmV0Y2godGhpcy5nZXQocGF0aCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwoZGVwZW5kZW5jaWVzKS50aGVuKChtb2R1bGVzOk1vZHVsZVtdKTpNb2R1bGU9PntcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IodmFyIGQ9MDtkPG1vZHVsZXMubGVuZ3RoO2QrKyl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZHVsZS5kZXBlbmRlbmNpZXNbZF0gPSBtb2R1bGVzW2RdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2R1bGVzW2RdLnBhcmVudCA9IG1vZHVsZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1vZHVsZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBwcm9taXNlO1xuICAgICAgICB9XG4gICAgICAgIGRlZmluZShtb2R1bGU6TW9kdWxlKXtcbiAgICAgICAgICAgIGlmKG1vZHVsZS5kZWZpbmVkKXtcbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG1vZHVsZSk7XG4gICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICBtb2R1bGUuZGVmaW5lZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSB7fTtcbiAgICAgICAgICAgICAgICB2YXIgZGVmaW5lcjphbnkgPSBuZXcgbW9kdWxlLmV4ZWN1dGFibGUoKG5hbWUsdmFsKT0+e1xuICAgICAgICAgICAgICAgICAgICBtb2R1bGUuZXhwb3J0c1tuYW1lXSA9IHZhbDtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBpZihtb2R1bGUuZGVwZW5kZW5jaWVzLmxlbmd0aCl7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwcm9taXNlczpQcm9taXNlPGFueT5bXSA9IG1vZHVsZS5kZXBlbmRlbmNpZXMubWFwKChtKTphbnk9PnRoaXMuZGVmaW5lKG0pLnRoZW4obT0+bS5leHBvcnRzKSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcykudGhlbigoZXhwczphbnkpPT57XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IodmFyIGk9MDtpPGV4cHMubGVuZ3RoO2krKyl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmaW5lci5zZXR0ZXJzW2ldKGV4cHNbaV0pXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZpbmVyLmV4ZWN1dGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBtb2R1bGU7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgICAgIGRlZmluZXIuZXhlY3V0ZSgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG1vZHVsZSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZXhwb3J0IGNsYXNzIFNlcnZlclNpZGVMb2FkZXIgZXh0ZW5kcyBMb2FkZXIge1xuICAgICAgICBjb25zdHJ1Y3Rvcigpe1xuICAgICAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgfVxuICAgICAgICBzdGF0aWMgZ2V0IEZTKCl7XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdGUycsIDxQcm9wZXJ0eURlc2NyaXB0b3I+e1xuICAgICAgICAgICAgICAgIHZhbHVlOiByZXF1aXJlKCdmcycpXG4gICAgICAgICAgICB9KS5GU1xuICAgICAgICB9XG4gICAgICAgIHN0YXRpYyBnZXQgVk0oKXtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ1ZNJywgPFByb3BlcnR5RGVzY3JpcHRvcj57XG4gICAgICAgICAgICAgICAgdmFsdWUgOiByZXF1aXJlKCd2bScpXG4gICAgICAgICAgICB9KS5WTVxuICAgICAgICB9XG4gICAgICAgIGdldCBydW50aW1lKCk6c3RyaW5nIHtcbiAgICAgICAgICAgIHJldHVybiBfX2ZpbGVuYW1lO1xuICAgICAgICB9XG4gICAgICAgIGdldCBtYWluKCk6c3RyaW5nIHtcbiAgICAgICAgICAgIHJldHVybiBwcm9jZXNzLmFyZ3ZbMl07XG4gICAgICAgIH1cbiAgICAgICAgZ2V0KG5hbWUpe1xuICAgICAgICAgICAgdmFyIG1vZCA9IHN1cGVyLmdldChuYW1lKTtcbiAgICAgICAgICAgIGlmKG1vZC5pZC5pbmRleE9mKCdub2RlLycpPT0wKXtcbiAgICAgICAgICAgICAgICBtb2QuZGVmaW5lZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgbW9kLmV4cG9ydHMgPSByZXF1aXJlKG1vZC5pZC5zdWJzdHJpbmcoNSkpO1xuICAgICAgICAgICAgICAgIHJldHVybiBtb2Q7XG4gICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICByZXR1cm4gbW9kO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJlYWQobW9kdWxlOk1vZHVsZSk6UHJvbWlzZTxNb2R1bGU+IHtcbiAgICAgICAgICAgIGlmKHRoaXMuY2FjaGVbbW9kdWxlLmlkXSl7XG4gICAgICAgICAgICAgICAgbW9kdWxlLnNvdXJjZSA9IHRoaXMuY2FjaGVbbW9kdWxlLmlkXTtcbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG1vZHVsZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgoYWNjZXB0LCByZWplY3QpPT4ge1xuICAgICAgICAgICAgICAgICAgICBTZXJ2ZXJTaWRlTG9hZGVyLkZTLnJlYWRGaWxlKG1vZHVsZS51cmwsICd1dGY4JywgZnVuY3Rpb24gKGVyciwgZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZHVsZS5zb3VyY2UgPSBkYXRhO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjY2VwdChtb2R1bGUpXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGV2YWwobW9kdWxlOk1vZHVsZSk6UHJvbWlzZTxNb2R1bGU+IHtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudCA9IG1vZHVsZTtcbiAgICAgICAgICAgIHZhciBjb250ZXh0ID0ge1xuICAgICAgICAgICAgICAgIFN5c3RlbSAgICAgIDogZ2xvYmFsWydTeXN0ZW0nXSxcbiAgICAgICAgICAgICAgICBCdWZmZXIgICAgICA6IGdsb2JhbFsnQnVmZmVyJ10sXG4gICAgICAgICAgICAgICAgcmVxdWlyZSAgICAgOiBnbG9iYWxbJ3JlcXVpcmUnXSxcbiAgICAgICAgICAgICAgICBwcm9jZXNzICAgICA6IGdsb2JhbFsncHJvY2VzcyddLFxuICAgICAgICAgICAgICAgIGNvbnNvbGUgICAgIDogZ2xvYmFsWydjb25zb2xlJ10sXG4gICAgICAgICAgICAgICAgX19maWxlbmFtZSAgOiBtb2R1bGUudXJsLFxuICAgICAgICAgICAgICAgIF9fZGlybmFtZSAgIDogUGF0aC5kaXJuYW1lKG1vZHVsZS51cmwpXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgU2VydmVyU2lkZUxvYWRlci5WTS5ydW5Jbk5ld0NvbnRleHQobW9kdWxlLnNvdXJjZSxjb250ZXh0LHtcbiAgICAgICAgICAgICAgICBmaWxlbmFtZSA6IG1vZHVsZS51cmxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50ID0gbnVsbDtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobW9kdWxlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBleHBvcnQgY2xhc3MgQ2xpZW50U2lkZUxvYWRlciBleHRlbmRzIExvYWRlciB7XG4gICAgICAgIGdldCBzY3JpcHQoKTphbnl7XG4gICAgICAgICAgICByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcignc2NyaXB0W21haW5dJyk7XG4gICAgICAgIH1cbiAgICAgICAgZ2V0IHJ1bnRpbWUoKTpzdHJpbmd7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zY3JpcHQuc3JjO1xuICAgICAgICB9XG4gICAgICAgIGdldCBtYWluKCk6c3RyaW5ne1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2NyaXB0LmdldEF0dHJpYnV0ZSgnbWFpbicpO1xuICAgICAgICB9XG4gICAgICAgIHJlYWQobW9kdWxlOk1vZHVsZSk6UHJvbWlzZTxNb2R1bGU+e1xuICAgICAgICAgICAgaWYodGhpcy5jYWNoZVttb2R1bGUuaWRdKXtcbiAgICAgICAgICAgICAgICBtb2R1bGUuc291cmNlID0gdGhpcy5jYWNoZVttb2R1bGUuaWRdO1xuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobW9kdWxlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChhY2NlcHQsIHJlamVjdCk9PiB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBvUmVxID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgICAgICAgICAgICAgICAgIG9SZXEuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIChlOmFueSk9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtb2R1bGUuc291cmNlID0gb1JlcS5yZXNwb25zZVRleHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBhY2NlcHQobW9kdWxlKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIG9SZXEuYWRkRXZlbnRMaXN0ZW5lcihcImVycm9yXCIsIGU9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZSlcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIG9SZXEub3BlbihcImdldFwiLCBtb2R1bGUudXJsLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgb1JlcS5zZW5kKCk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBldmFsKG1vZHVsZTpNb2R1bGUpOlByb21pc2U8TW9kdWxlPiB7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnQgPSBtb2R1bGU7XG4gICAgICAgICAgICB2YXIgYUhlYWQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdoZWFkJyk7XG4gICAgICAgICAgICB2YXIgYVNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuICAgICAgICAgICAgYVNjcmlwdC50eXBlID0gJ3RleHQvamF2YXNjcmlwdCc7XG4gICAgICAgICAgICBhU2NyaXB0LmlkID0gbW9kdWxlLmlkO1xuICAgICAgICAgICAgYVNjcmlwdC50ZXh0ID0gbW9kdWxlLnNvdXJjZSsnXFxuLy8jIHNvdXJjZVVSTD0nK21vZHVsZS51cmw7XG4gICAgICAgICAgICBhSGVhZC5hcHBlbmRDaGlsZChhU2NyaXB0KTtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudCA9IG51bGw7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG1vZHVsZSk7XG4gICAgICAgIH1cbiAgICB9XG59IiwKICAgICJuYW1lc3BhY2UgRWNtYWwge1xuICAgIGV4cG9ydCBlbnVtIEVudmlyb25tZW50IHtcbiAgICAgICAgU0VSVkVSLFxuICAgICAgICBDTElFTlRcbiAgICB9XG4gICAgZXhwb3J0IGZ1bmN0aW9uIHBsYXRmb3JtKC4uLnN1cHBvcnQpe1xuICAgICAgICByZXR1cm4gdGFyZ2V0PT57XG4gICAgICAgICAgICB0YXJnZXQuc3VwcG9ydCA9IHN1cHBvcnQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZXhwb3J0IGludGVyZmFjZSBNb2R1bGUge1xuICAgICAgICBpZD86c3RyaW5nO1xuICAgICAgICB1cmw/OnN0cmluZztcbiAgICAgICAgcGFyZW50PzpzdHJpbmd8TW9kdWxlO1xuICAgICAgICBkZXBlbmRlbmNpZXM/OihzdHJpbmd8TW9kdWxlKVtdXG4gICAgICAgIHNvdXJjZT86c3RyaW5nXG4gICAgICAgIGV4ZWN1dGFibGU/Ok9iamVjdENvbnN0cnVjdG9yO1xuICAgICAgICBkZWZpbmVkPzpCb29sZWFuO1xuICAgICAgICBleHBvcnRzPzphbnk7XG4gICAgfVxuICAgIGV4cG9ydCBpbnRlcmZhY2UgTW9kdWxlcyB7XG4gICAgICAgIFtrZXk6c3RyaW5nXTpNb2R1bGVcbiAgICB9XG59XG4iLAogICAgIm5hbWVzcGFjZSBFY21hbCB7XG4gICAgZXhwb3J0IGNsYXNzIFBhdGgge1xuICAgICAgICBzdGF0aWMgU0VQID0gJy8nO1xuICAgICAgICBzdGF0aWMgZmlsZW5hbWUocGF0aDpTdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBwYXRoLnNwbGl0KFBhdGguU0VQKS5wb3AoKTtcbiAgICAgICAgfVxuICAgICAgICBzdGF0aWMgZGlybmFtZShwYXRoKSB7XG4gICAgICAgICAgICBwYXRoID0gcGF0aC5zcGxpdCgnLycpO1xuICAgICAgICAgICAgcGF0aC5wb3AoKTtcbiAgICAgICAgICAgIHBhdGggPSBwYXRoLmpvaW4oJy8nKTtcbiAgICAgICAgICAgIHJldHVybiBwYXRoO1xuICAgICAgICB9XG4gICAgICAgIHN0YXRpYyBub3JtYWxpemUocGF0aCkge1xuICAgICAgICAgICAgaWYgKCFwYXRoIHx8IHBhdGggPT09ICcvJykge1xuICAgICAgICAgICAgICAgIHJldHVybiAnLyc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgcHJlcGVuZCA9IChwYXRoWzBdID09ICcvJyB8fCBwYXRoWzBdID09ICcuJyk7XG4gICAgICAgICAgICB2YXIgdGFyZ2V0ID0gW10sIHNyYywgc2NoZW1lLCBwYXJ0cywgdG9rZW47XG4gICAgICAgICAgICBpZiAocGF0aC5pbmRleE9mKCc6Ly8nKSA+IDApIHtcbiAgICAgICAgICAgICAgICBwYXJ0cyA9IHBhdGguc3BsaXQoJzovLycpO1xuICAgICAgICAgICAgICAgIHNjaGVtZSA9IHBhcnRzWzBdO1xuICAgICAgICAgICAgICAgIHNyYyA9IHBhcnRzWzFdLnNwbGl0KCcvJyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHNyYyA9IHBhdGguc3BsaXQoJy8nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3JjLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgdG9rZW4gPSBzcmNbaV07XG4gICAgICAgICAgICAgICAgaWYgKHRva2VuID09PSAnLi4nKSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldC5wb3AoKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRva2VuICE9PSAnJyAmJiB0b2tlbiAhPT0gJy4nKSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldC5wdXNoKHRva2VuKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIChzY2hlbWUgPyBzY2hlbWUgKyAnOi8vJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgKHByZXBlbmQgPyAnLycgOiAnJykgK1xuICAgICAgICAgICAgICAgIHRhcmdldC5qb2luKCcvJykucmVwbGFjZSgvW1xcL117Mix9L2csICcvJylcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgc3RhdGljIHJlc29sdmUoLi4ucGF0aHMpIHtcbiAgICAgICAgICAgIHZhciBjdXJyZW50ID0gcGF0aHMuc2hpZnQoKTtcbiAgICAgICAgICAgIGZvcihsZXQgcGF0aCxwID0wO3A8cGF0aHMubGVuZ3RoO3ArKyl7XG4gICAgICAgICAgICAgICAgcGF0aD1wYXRoc1twXTtcbiAgICAgICAgICAgICAgICBpZiAocGF0aFswXSA9PSAnLycpIHtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudCA9IHBhdGg7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudCA9IFBhdGgubm9ybWFsaXplKGN1cnJlbnQgKyAnLycgKyBwYXRoKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBjdXJyZW50O1xuICAgICAgICB9XG4gICAgfVxufVxuIiwKICAgICJuYW1lc3BhY2UgRWNtYWwge1xuICAgIGRlY2xhcmUgdmFyIHdpbmRvdzphbnk7XG4gICAgZGVjbGFyZSB2YXIgZ2xvYmFsOmFueTtcbiAgICBkZWNsYXJlIHZhciBwcm9jZXNzOmFueTtcbiAgICBkZWNsYXJlIGZ1bmN0aW9uIHJlcXVpcmUocGF0aDpzdHJpbmcpOmFueTtcbiAgICBleHBvcnQgY2xhc3MgUnVudGltZSB7XG4gICAgICAgIHN0YXRpYyBnZXQgZW52aXJvbm1lbnQoKXtcbiAgICAgICAgICAgIGlmKHR5cGVvZiB3aW5kb3chPSd1bmRlZmluZWQnKXtcbiAgICAgICAgICAgICAgICByZXR1cm4gRW52aXJvbm1lbnQuQ0xJRU5UO1xuICAgICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICBpZih0eXBlb2YgcHJvY2Vzcz09J29iamVjdCcpe1xuICAgICAgICAgICAgICAgIHJldHVybiBFbnZpcm9ubWVudC5TRVJWRVI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZXhwb3J0IGNsYXNzIFN5c3RlbSB7XG4gICAgICAgIGxvYWRlcjpMb2FkZXI7XG4gICAgICAgIGNvbnN0cnVjdG9yKCl7XG4gICAgICAgICAgICBzd2l0Y2goUnVudGltZS5lbnZpcm9ubWVudCl7XG4gICAgICAgICAgICAgICAgY2FzZSBFbnZpcm9ubWVudC5TRVJWRVI6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubG9hZGVyID0gbmV3IFNlcnZlclNpZGVMb2FkZXIoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIEVudmlyb25tZW50LkNMSUVOVDpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2FkZXIgPSBuZXcgQ2xpZW50U2lkZUxvYWRlcigpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbmZpZyhvcHRpb25zOmFueSl7XG4gICAgICAgICAgICBpZihvcHRpb25zLmJhc2Upe1xuICAgICAgICAgICAgICAgIHRoaXMubG9hZGVyLmJhc2UgPSBvcHRpb25zLmJhc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmVnaXN0ZXIobmFtZSxkZXBzLGV4ZWMpe1xuICAgICAgICAgICAgaWYoQXJyYXkuaXNBcnJheShuYW1lKSl7XG4gICAgICAgICAgICAgICAgdGhpcy5sb2FkZXIucmVnaXN0ZXIoJ0AnLG5hbWUsZGVwcyk7XG4gICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICB0aGlzLmxvYWRlci5yZWdpc3RlcihuYW1lLGRlcHMsZXhlYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaW1wb3J0KG5hbWUpe1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9hZGVyLmltcG9ydChuYW1lKVxuICAgICAgICB9XG4gICAgICAgIGJ1bmRsZShjb250ZW50KXtcbiAgICAgICAgICAgIHRoaXMubG9hZGVyLmJ1bmRsZShjb250ZW50KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBleHBvcnQgZnVuY3Rpb24gcnVuKCk6U3lzdGVtIHtcbiAgICAgICAgdmFyIHN5c3RlbSA9IG5ldyBFY21hbC5TeXN0ZW0oKTtcbiAgICAgICAgLyppZihzeXN0ZW0ubG9hZGVyLm1haW4pe1xuICAgICAgICAgICAgc3lzdGVtLmltcG9ydChzeXN0ZW0ubG9hZGVyLm1haW4pLnRoZW4oTWFpbj0+e1xuICAgICAgICAgICAgICAgIHJldHVybiBcIk9LXCI7XG4gICAgICAgICAgICB9KS5jYXRjaChlPT5jb25zb2xlLmxvZyhlLnN0YWNrKSk7XG4gICAgICAgIH0qL1xuICAgICAgICBpZih0eXBlb2YgZ2xvYmFsIT0ndW5kZWZpbmVkJyl7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZ2xvYmFsLCdTeXN0ZW0nLCA8UHJvcGVydHlEZXNjcmlwdG9yPntcbiAgICAgICAgICAgICAgICB2YWx1ZTogc3lzdGVtXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShnbG9iYWwsJ3JlcXVpcmUnLCA8UHJvcGVydHlEZXNjcmlwdG9yPntcbiAgICAgICAgICAgICAgICB2YWx1ZTogcmVxdWlyZVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3lzdGVtO1xuICAgIH1cbn1cblxuY29uc3QgU3lzdGVtID0gRWNtYWwucnVuKCk7XG5cbiIKICBdCn0="
});